@model Main.Post

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

<script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
<script type="text/javascript" src='http://maps.google.com/maps/api/js?sensor=false&libraries=places'></script>
<script src="~/Scripts/locationpicker.jquery.js"></script>
<script src="~/Scripts/timeago.jquery.js"></script>

<script>
    $(document).ready(function () {
        $('#map').locationpicker({
            radius: 2500,
            zoom: 11,
            inputBinding: {
                latitudeInput: $('#Latitude'),
                longitudeInput: $('#Longitude'),
                locationNameInput: $('#locationSearch')
            },
            enableAutocomplete: true
        });
    });
</script>



<link rel="stylesheet" type="text/css" href="~/Content/quill.snow.css">












<div id="content-container">
    <div class="advanced-wrapper">
        <div class="toolbar-container">
            <span class="ql-format-group">
                <select title="Size" class="ql-size">
                    <option value="14px" selected>Normal</option>
                    <option value="18px">Large</option>
                    <option value="32px">Huge</option>
                </select>
            </span>
            <span class="ql-format-group">
                <span title="Bold" class="ql-format-button ql-bold"></span>
                <span class="ql-format-separator"></span>
                <span title="Italic" class="ql-format-button ql-italic"></span>
                <span class="ql-format-separator"></span>
                <span title="Underline" class="ql-format-button ql-underline"></span>
            </span>
            <span class="ql-format-group">
                <span class="ql-format-separator"></span>
                <span title="left" class="ql-format-button ql-left"></span>
                <span title="center" class="ql-format-button ql-center"></span>
                <span title="right" class="ql-format-button ql-right"></span>
                <span title="justify" class="ql-format-button ql-justify"></span>
                <span class="ql-format-separator"></span>
                <select title="Text Alignment" class="ql-align">
                    <option value="left" selected></option>
                    <option value="center"></option>
                    <option value="right"></option>
                    <option value="justify"></option>
                </select>
            </span>
            <span class="ql-format-group">
                <span title="Link" class="ql-format-button ql-link"></span>
                <span class="ql-format-separator"></span>
                <span title="Image" class="ql-format-button ql-image"></span>
                <span class="ql-format-separator"></span>
                <span title="List" class="ql-format-button ql-list"></span>
            </span>
        </div>
        <div class="editor-container"></div>
    </div>
</div>




    <script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.js"></script>
    <script type="text/javascript" src="~/Scripts/quill.min.js"></script>
    <script type="text/javascript">
        var advancedEditor;
        advancedEditor = new Quill('.advanced-wrapper .editor-container', {
            modules: {
                'toolbar': {
                    container: '.advanced-wrapper .toolbar-container'
                },
                'link-tooltip': true,
                'image-tooltip': true
            },
            //formats: ['bold', 'italic', 'color'],
            theme: 'snow'
        });

    </script>


<div class="tooltip image-tooltip-container" style="position: absolute; left: 123px; top: 49.5px;">
    <input class="input" type="textbox"><div class="preview"><span>Preview</span></div>
    <a href="javascript:;" class="cancel">Cancel</a><a href="javascript:;" class="insert">Insert</a>
</div>


<script type="text/javascript">
    $(document).ready(function () {
        function readImage(input) {
            if (input.files && input.files[0]) {
                var FR = new FileReader();
                FR.onload = function (e) {
                    //$('#img').attr("src", e.target.result);
                    //$('#base').text(e.target.result);

                    $("#imageUploadInner").append('<div class="img"><img src="' + e.target.result + '"><div class="delete">X</div></div>');
                    $('.delete').on('click', function () {
                        $(this).parents('.img').remove();
                    });
                };
                FR.readAsDataURL(input.files[0]);
            }
        }

        $("#files").change(function () {
            readImage(this);
        });
    });
</script>
<style type="text/css">
    #imageUploadWrapper {
        background: #EFEFEF;
        border: 1px solid black;
        display: block;
        float: right;
        width: 49%;
        height: 400px;
        overflow-x: auto;
        overflow-y: hidden;
    }
    #imageUploadInner {
        display: block;
        width: 5000px;
        height: 400px;
    }
        #imageUploadInner .img {
            display: inline-block;
            border: 1px solid black;
            background: #fff;
            float: left;
            width: 350px;
            height: 350px;
            margin: 25px;
            position: relative;
        }
        #imageUploadInner .img img {
            display: block;
            width: 100%;
            height: 100%;
        }
            #imageUploadInner .img .delete {
                background: #EFEFEF;
                width: 40px;
                height: 40px;
                cursor: pointer;

                position: absolute;
                top: 50%;
                left: 50%;
                z-index: 10;

                margin-top: -20px;
                margin-left: -20px;

                font-size: 20px;
                line-height: 40px;
                border-radius: 20px;
                text-align: center;
            }
    .advanced-wrapper {
        width: 100%;
    }
    #content-container {
        display: block;
        width: 49%;
        float: left;
    }

    #drop_zone {
        width: 250px;
        height: 150px;
        border: 2px dashed #e0e0e0;
    }

    #dropZone {
        display: none;
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        z-index: 99997;
        background: #fff;
        opacity: 0.8;
    }
        #dropZone div {
            display: block;
            position: fixed;
            top: 5%;
            right: 5%;
            bottom: 5%;
            left: 5%;
            z-index: 99998;

            border: 2px dashed #808080;
            text-align: center;
            font-size: 42px;
        }
        #dropZone div div {
            display: block;
            position: fixed;
            top: 50%;
            left: 50%;
            z-index: 99999;

            height: 50px;
            width: 600px;

            margin: -25px 0 0 -300px;

            border: none;
            line-height: 50px;
            text-align: center;
            font-size: 42px;
        }
</style>



<div id="imageUploadWrapper">
    <div id="imageUploadInner"></div>
</div>


<input type="file" id="files" name="files[]" multiple />
<output id="list"></output>

<div class="clearfix"></div>

<script>
    $(document).ready(function(){
        function handleFileSelect(evt) {
            //evt.stopPropagation();
            evt.preventDefault();

            var files = evt.dataTransfer.files; // FileList object.


            for (var i = 0, f; f = files[i]; i++) {

                // Only process image files.
                if (!f.type.match('image.*')) {
                    continue;
                }

                var reader = new FileReader();

                // Closure to capture the file information.
                reader.onload = (function (theFile) {
                    return function (e) {
                        // e.target.result
                        // escape(theFile.name)

                        var output = '<div class="img"><img src="'
                                        + e.target.result +
                                    '"><div class="name">'
                                        + theFile.name +
                                    '</div><div class="size">'
                                        + theFile.size +
                                    '</div><div class="delete">X</div></div>';
                        $("#imageUploadInner").append(output);
                    };
                })(f);
                
                // Read in the image file as a data URL.
                reader.readAsDataURL(f);
            }
        }

        function handleDragOver(evt) {
            evt.stopPropagation();
            evt.preventDefault();
            evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
        }

        // The plugin code
        $.fn.draghover = function (options) {
            return this.each(function () {

                var collection = $(),
                    self = $(this);

                self.on('dragenter', function (e) {
                    if (collection.length === 0) {
                        self.trigger('draghoverstart');
                    }
                    collection = collection.add(e.target);
                });

                self.on('dragleave drop', function (e) {
                    collection = collection.not(e.target);
                    if (collection.length === 0) {
                        self.trigger('draghoverend');
                    }
                });
            });
        };


        var dropZone = document.getElementById('dropZone');
        dropZone.addEventListener('dragover', handleDragOver, false);
        dropZone.addEventListener('drop', handleFileSelect, false);

        // Now that we have a plugin, we can listen for the new events 
        $(window).draghover().on({
            'draghoverstart': function () {
                $('#dropZone').show();
            },
            'draghoverend': function () {
                $('#dropZone').hide();
            }
        });
    });
</script>

<div id="dropZone">
    <div><div>Drop Files Here to Add Them</div></div>
</div>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Post</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CategoryID, "CategoryID", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                </div>
            </div>


            @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
            @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
            <div id="mapWrapper">
                <input class="form-control" type="text" id="locationSearch" />
                <div id="map"></div>
            </div>
            @Html.HiddenFor(model => model.Latitude)
            @Html.HiddenFor(model => model.Longitude)



            <div class="form-actions no-color">
                <input type="submit" value="Create" class="btn btn-success pull-right" />
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
            </div>
        </div>
    }


    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
